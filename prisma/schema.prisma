// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  files    File[]
}

model File {
  id            String           @id @default(uuid())
  filename      String
  originalName  String?
  url           String
  key           String
  bucket        String
  ownerId       String
  owner         User             @relation(fields: [ownerId], references: [id])
  accessLogs    FileAccessLog[]
  visibility    String           @default("private") // private | password_protected | public
  password      String?
  failedLogs    FailedAccessLog[]
  downloadLimit Int?             
  downloadCount Int              @default(0) 
  expiresAt     DateTime?
  createdAt     DateTime         @default(now())
  shares        FileShare[]
  size          Int?
  fileShareLog  FileShareDownloadLog[]
}

model FileAccessLog {
  id        String   @id @default(uuid())
  fileId    String
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  ipAddress String
  userAgent String
  accessedAt DateTime @default(now())
  email     String?
}

model FailedAccessLog {
  id         String   @id @default(uuid())
  fileId     String
  file       File     @relation(fields: [fileId], references: [id], onDelete: Cascade) // relasi dan cascade
  ipAddress  String
  userAgent  String
  reason     String
  accessedAt DateTime @default(now())
  email      String?
}

model FileDeletionFailureLog {
  id        String   @id @default(uuid())
  fileId    String
  fileName  String
  reason    String
  createdAt DateTime @default(now())
}

model FileShare {
  id             String   @id @default(uuid())
  file           File     @relation(fields: [fileId], references: [id])
  fileId         String
  email          String
  token          String   @unique
  expiresAt      DateTime
  maxDownload    Int
  downloadCount  Int      @default(0)
  note           String?  
  createdAt      DateTime @default(now())
}

model FileShareDownloadLog {
  id        String   @id @default(uuid())
  fileId    String
  file      File     @relation(fields: [fileId], references: [id])
  token     String
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
}
